<script>
	import * as THREE from "three";
	import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
	import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";
	import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";
	import { DotScreenPass } from "three/examples/jsm/postprocessing/DotScreenPass.js";
	import { OutputPass } from "three/examples/jsm/postprocessing/OutputPass.js";

	const scene = new THREE.Scene();

	const camera = new THREE.PerspectiveCamera(
		70,
		window.innerWidth / window.innerHeight,
		1,
		1000,
	);
	camera.position.z = 5;

	const renderer = new THREE.WebGLRenderer();
	renderer.setSize(window.innerWidth, window.innerHeight);

	const canvas = renderer.domElement;
	const container = document.getElementById("scene-container");
	container.appendChild(canvas);

	const composer = new EffectComposer(renderer);
	composer.addPass(new RenderPass(scene, camera));
	composer.addPass(new DotScreenPass());
	composer.addPass(new OutputPass());

	const pointLight = new THREE.PointLight(0xffffff, 10);
	scene.add(pointLight);
	pointLight.position.z = 5;

	const loader = new GLTFLoader();
	loader.load("models/nike.glb", (gltf) => {
		const model = gltf.scene;
		model.rotation.set(0, (Math.random() * 0.75 - 0.25) * Math.PI, 0);
		model.scale.set(0.05, 0.05, 0.05);
		model.position.set(0, -0.75, 0);
		scene.add(model);
	});

	(function animate() {
		requestAnimationFrame(animate);
		composer.render();
	})();

	function movePointLightToVector2(vector2) {
		let vector = new THREE.Vector3(vector2.x, vector2.y, 0);
		vector.unproject(camera);
		var dir = vector.sub(camera.position).normalize();
		var distance = -camera.position.z / dir.z;
		var pos = camera.position.clone().add(dir.multiplyScalar(distance));
		pos.z += 3.25;

		pointLight.position.copy(pos);
	}

	container.parentElement.onmousemove = (event) => {
		movePointLightToVector2(
			new THREE.Vector2(
				(event.clientX / window.innerWidth) * 2 - 1,
				-(event.clientY / window.innerHeight) * 2 + 1,
			),
		);
	};

	window.onresize = () => {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(window.innerWidth, window.innerHeight);
	};
</script>

<div style="display:flex;align-items:center;justify-content:center">
	<div id="scene-container" style="overflow:hidden"></div>
	<span
		style="position:absolute;text-align:center;font-size:4em;font-weight:bold;mix-blend-mode:difference;color:#FFF"
	>
		Garden Gim
	</span>
</div>
